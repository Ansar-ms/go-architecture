basePath: /
definitions:
  handler.ErrorResponse:
    properties:
      error:
        type: string
    type: object
  handler.UserResponse:
    properties:
      users:
        items:
          $ref: '#/definitions/model.User'
        type: array
    type: object
  model.CreateUserRequest:
    properties:
      age:
        type: integer
      name:
        type: string
      password:
        type: string
    type: object
  model.User:
    properties:
      age:
        type: integer
      id:
        type: integer
      name:
        type: string
      password:
        type: string
    type: object
host: localhost:8080
info:
  contact:
    email: support@swagger.io
    name: API Support
    url: http://www.swagger.io/support
  description: This is a sample server for managing users.
  license:
    name: Apache 2.0
    url: http://www.apache.org/licenses/LICENSE-2.0.html
  termsOfService: http://swagger.io/terms/
  title: User Management API
  version: "1.0"
paths:
  /users:
    get:
      consumes:
      - application/json
      description: Retrieve a list of all users
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/handler.UserResponse'
      summary: Get all users
      tags:
      - users
    post:
      consumes:
      - application/json
      description: Add a new user
      parameters:
      - description: User data
        in: body
        name: body
        required: true
        schema:
          $ref: '#/definitions/model.CreateUserRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/handler.UserResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/handler.ErrorResponse'
      summary: Create a new user
      tags:
      - users
  /users/{id}:
    delete:
      consumes:
      - application/json
      description: Delete an existing user by their ID
      parameters:
      - description: User ID
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/handler.UserResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/handler.ErrorResponse'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/handler.ErrorResponse'
      security:
      - JWT: []
      summary: Delete a user by ID
      tags:
      - users
    put:
      consumes:
      - application/json
      description: Update an existing user by their ID
      parameters:
      - description: User ID
        in: path
        name: id
        required: true
        type: integer
      - description: Updated user data
        in: body
        name: body
        required: true
        schema:
          $ref: '#/definitions/model.User'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/handler.UserResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/handler.ErrorResponse'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/handler.ErrorResponse'
      security:
      - JWT: []
      summary: Update a user by ID
      tags:
      - users
schemes:
- http
- https
securityDefinitions:
  JWT:
    in: header
    name: Authorization
    type: apiKey
swagger: "2.0"
